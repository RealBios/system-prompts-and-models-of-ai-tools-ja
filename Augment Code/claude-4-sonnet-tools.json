{
  "tools": [
    {
      "name": "str-replace-editor",
      "description": "ツール for editing ファイル.\n* `パス` is a ファイル パス relative to the workspace root\n* `insert` and `str_replace` コマンド 出力 a snippet of the edited section for each entry. This snippet reflects the final state of the ファイル after all edits and IDE auto-formatting have been applied.\n* 生成します `instruction_reminder` first to remind yourself to limit the edits to at most 150 lines.\n\nNotes for using the `str_replace` コマンド:\n* Specify `old_str_1`, `new_str_1`, `old_str_start_line_number_1` and `old_str_end_line_number_1` properties for the first replacement, `old_str_2`, `new_str_2`, `old_str_start_line_number_2` and `old_str_end_line_number_2` for the second replacement, and so on\n* The `old_str_start_line_number_1` and `old_str_end_line_number_1` パラメータ are 1-based line numbers\n* Both `old_str_start_line_number_1` and `old_str_end_line_number_1` are INCLUSIVE\n* The `old_str_1` パラメータ should match EXACTLY one or more consecutive lines from the original ファイル. Be mindful of whitespace!\n* Empty `old_str_1` is allowed only when the ファイル is empty or contains only whitespaces\n* It is important to specify `old_str_start_line_number_1` and `old_str_end_line_number_1` to disambiguate between multiple occurrences of `old_str_1` in the ファイル\n* Make sure that `old_str_start_line_number_1` and `old_str_end_line_number_1` do not overlap with other `old_str_start_line_number_2` and `old_str_end_line_number_2` entries\n* The `new_str_1` パラメータ should contain the edited lines that should replace the `old_str_1`. Can be an empty string to 削除します content\n* To make multiple replacements in one ツール call add multiple sets of replacement パラメータ. For 例, `old_str_1`, `new_str_1`, `old_str_start_line_number_1` and `old_str_end_line_number_1` properties for the first replacement, `old_str_2`, `new_str_2`, `old_str_start_line_number_2`, `old_str_end_line_number_2` for the second replacement, etc.\n\nNotes for using the `insert` コマンド:\n* Specify `insert_line_1` and `new_str_1` properties for the first insertion, `insert_line_2` and `new_str_2` for the second insertion, and so on\n* The `insert_line_1` パラメータ specifies the line number after which to insert the new string\n* The `insert_line_1` パラメータ is 1-based line number\n* To insert at the very beginning of the ファイル, use `insert_line_1: 0`\n* To make multiple insertions in one ツール call add multiple sets of insertion パラメータ. For 例, `insert_line_1` and `new_str_1` properties for the first insertion, `insert_line_2` and `new_str_2` for the second insertion, etc.\n\nIMPORTANT:\n* This is the only ツール you should use for editing ファイル.\n* If it fails try your best to fix inputs and retry.\n* DO NOT fall back to removing the whole ファイル and recreating it from scratch.\n* DO NOT use sed or any other コマンド line ツール for editing ファイル.\n* Try to fit as many edits in one ツール call as possible\n* Use the view ツール to 読み取ります ファイル before editing them.",
      "parameters": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "enum": [
              "str_replace",
              "insert"
            ],
            "description": "The コマンド to run. Allowed options are: 'str_replace', 'insert'."
          },
          "path": {
            "type": "string",
            "description": "Full パス to ファイル relative to the workspace root, 例: 'services/api_proxy/ファイル.py' or 'services/api_proxy'."
          },
          "instruction_reminder": {
            "type": "string",
            "description": "Reminder to limit edits to at most 150 lines. Should be exactly this string: 'ALWAYS BREAK DOWN EDITS INTO SMALLER CHUNKS OF AT MOST 150 LINES EACH.'"
          },
          "old_str_1": {
            "type": "string",
            "description": "Required パラメータ of `str_replace` コマンド containing the string in `パス` to replace."
          },
          "new_str_1": {
            "type": "string",
            "description": "Required パラメータ of `str_replace` コマンド containing the new string. Can be an empty string to 削除します content. Required パラメータ of `insert` コマンド containing the string to insert."
          },
          "old_str_start_line_number_1": {
            "type": "integer",
            "description": "The line number of the first line of `old_str_1` in the ファイル. This is used to disambiguate between multiple occurrences of `old_str_1` in the ファイル."
          },
          "old_str_end_line_number_1": {
            "type": "integer",
            "description": "The line number of the last line of `old_str_1` in the ファイル. This is used to disambiguate between multiple occurrences of `old_str_1` in the ファイル."
          },
          "insert_line_1": {
            "type": "integer",
            "description": "Required パラメータ of `insert` コマンド. The line number after which to insert the new string. This line number is relative to the state of the ファイル before any insertions in the current ツール call have been applied."
          }
        },
        "required": [
          "command",
          "path",
          "instruction_reminder"
        ]
      }
    },
    {
      "name": "open-browser",
      "description": "開きます a URL in the 既定値 browser.\n\n1. The ツール takes in a URL and 開きます it in the 既定値 browser.\n2. The ツール does not 返します any content. It is intended for the user to visually inspect and interact with the page. You will not have access to it.\n3. You should not use `開きます-browser` on a URL that you have called the ツール on before in the conversation history, because the page is already 開きます in the user's browser and the user can see it and refresh it themselves. Each time you call `開きます-browser`, it will jump the user to the browser window, which is highly annoying to the user.",
      "parameters": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL to 開きます in the browser."
          }
        },
        "required": [
          "url"
        ]
      }
    },
    {
      "name": "diagnostics",
      "description": "Get Issue (エラー, 警告, etc.) from the IDE. You must provide the パス of the ファイル for which you want to get Issue.",
      "parameters": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Required 一覧を取得します of ファイル パス to get Issue for from the IDE."
          }
        },
        "required": [
          "paths"
        ]
      }
    },
    {
      "name": "read-terminal",
      "description": "読み取ります 出力 from the active or most-recently used VSCode terminal.\n\nBy 既定値, it 読み取ります all of the text visible in the terminal, not just the 出力 of the most recent コマンド.\n\nIf you want to 読み取ります only the selected text in the terminal, set `only_selected=true` in the ツール 入力.\nOnly do this if you know the user has selected text that you want to 読み取ります.\n\nNote that this is unrelated to the 一覧を取得します-processes and 読み取ります-process ツール, which interact with processes that were launched with the \"launch-process\" ツール.",
      "parameters": {
        "type": "object",
        "properties": {
          "only_selected": {
            "type": "boolean",
            "description": "Whether to 読み取ります only the selected text in the terminal."
          }
        },
        "required": []
      }
    },
    {
      "name": "git-commit-retrieval",
      "description": "This ツール is Augment's context engine with git コミット history awareness. It:\n1. Takes in a natural language description of the code you are looking for;\n2. Uses the git コミット history as the only context for retrieval;\n3. Otherwise functions like the standard codebase-retrieval ツール.",
      "parameters": {
        "type": "object",
        "properties": {
          "information_request": {
            "type": "string",
            "description": "A description of the information you need."
          }
        },
        "required": [
          "information_request"
        ]
      }
    },
    {
      "name": "launch-process",
      "description": "Launch a new process with a shell コマンド. A process can be waiting (`wait=true`) or non-waiting (`wait=false`).\n\nIf `wait=true`, launches the process in an interactive terminal, and waits for the process to complete up to\n`max_wait_seconds` seconds. If the process ends during this period, the ツール call 返します. If the timeout\nexpires, the process will continue running in the background but the ツール call will 返します. You can then\ninteract with the process using the other process ツール.\n\nNote: Only one waiting process can be running at a time. If you try to launch a process with `wait=true`\nwhile another is running, the ツール will 返します an エラー.\n\nIf `wait=false`, launches a background process in a separate terminal. This 返します immediately, while the\nprocess keeps running in the background.\n\nNotes:\n- Use `wait=true` processes when the コマンド is expected to be short, or when you can't\nproceed with your task until the process is complete. Use `wait=false` for processes that are\nexpected to run in the background, such as starting a server you'll need to interact with, or a\nlong-running process that does not need to complete before proceeding with the task.\n- If this ツール 返します while the process is still running, you can continue to interact with the process\nusing the other available ツール. You can wait for the process, 読み取ります from it, 書き込みます to it, kill it, etc.\n- You can use this ツール to interact with the user's local version control system. Do not use the\nretrieval ツール for that purpose.\n- If there is a more specific ツール available that can perform the function, use that ツール instead of\nthis one.\n\nThe OS is win32. The shell is 'bash'.",
      "parameters": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "The shell コマンド to 実行します."
          },
          "wait": {
            "type": "boolean",
            "description": "Whether to wait for the コマンド to complete."
          },
          "max_wait_seconds": {
            "type": "number",
            "description": "Number of seconds to wait for the コマンド to complete. Only relevant when wait=true. 10 minutes may be a good 既定値: increase from there if needed."
          },
          "cwd": {
            "type": "string",
            "description": "Required パラメータ. Absolute パス to the working ディレクトリ for the コマンド."
          }
        },
        "required": [
          "command",
          "wait",
          "max_wait_seconds",
          "cwd"
        ]
      }
    },
    {
      "name": "kill-process",
      "description": "Kill a process by its terminal ID.",
      "parameters": {
        "type": "object",
        "properties": {
          "terminal_id": {
            "type": "integer",
            "description": "Terminal ID to kill."
          }
        },
        "required": [
          "terminal_id"
        ]
      }
    },
    {
      "name": "read-process",
      "description": "読み取ります 出力 from a terminal.\n\nIf `wait=true` and the process has not yet completed, waits for the terminal to complete up to `max_wait_seconds` seconds before returning its 出力.\n\nIf `wait=false` or the process has already completed, 返します immediately with the current 出力.",
      "parameters": {
        "type": "object",
        "properties": {
          "terminal_id": {
            "type": "integer",
            "description": "Terminal ID to 読み取ります from."
          },
          "wait": {
            "type": "boolean",
            "description": "Whether to wait for the コマンド to complete."
          },
          "max_wait_seconds": {
            "type": "number",
            "description": "Number of seconds to wait for the コマンド to complete. Only relevant when wait=true. 1 minute may be a good 既定値: increase from there if needed."
          }
        },
        "required": [
          "terminal_id",
          "wait",
          "max_wait_seconds"
        ]
      }
    },
    {
      "name": "write-process",
      "description": "書き込みます 入力 to a terminal.",
      "parameters": {
        "type": "object",
        "properties": {
          "terminal_id": {
            "type": "integer",
            "description": "Terminal ID to 書き込みます to."
          },
          "input_text": {
            "type": "string",
            "description": "Text to 書き込みます to the process's stdin."
          }
        },
        "required": [
          "terminal_id",
          "input_text"
        ]
      }
    },
    {
      "name": "list-processes",
      "description": "一覧を取得します all known terminals created with the launch-process ツール and their states.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    },
    {
      "name": "web-search",
      "description": "検索します the web for information. 返します 結果 in markdown format.\nEach 結果 includes the URL, title, and a snippet from the page if available.\n\nThis ツール uses Google's Custom 検索します API to find relevant web pages.",
      "parameters": {
        "type": "object",
        "title": "WebSearchInput",
        "description": "入力 スキーマ for the web 検索します ツール.",
        "properties": {
          "query": {
            "title": "Query",
            "description": "The 検索します クエリ to send.",
            "type": "string"
          },
          "num_results": {
            "title": "Num Results",
            "description": "Number of 結果 to 返します",
            "default": 5,
            "minimum": 1,
            "maximum": 10,
            "type": "integer"
          }
        },
        "required": [
          "query"
        ]
      }
    },
    {
      "name": "web-fetch",
      "description": "Fetches data from a webpage and 変換します it into Markdown.\n\n1. The ツール takes in a URL and 返します the content of the page in Markdown format;\n2. If the 返します is not valid Markdown, it means the ツール cannot successfully parse this page.",
      "parameters": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL to fetch."
          }
        },
        "required": [
          "url"
        ]
      }
    },
    {
      "name": "codebase-retrieval",
      "description": "This ツール is Augment's context engine, the world's best codebase context engine. It:\n1. Takes in a natural language description of the code you are looking for;\n2. Uses a proprietary retrieval/embedding モデル suite that produces the highest-quality recall of relevant code snippets from across the codebase;\n3. Maintains a real-time index of the codebase, so the 結果 are always up-to-date and reflects the current state of the codebase;\n4. Can retrieve across 差分erent programming languages;\n5. Only reflects the current state of the codebase on the disk, and has no information on version control or code history.",
      "parameters": {
        "type": "object",
        "properties": {
          "information_request": {
            "type": "string",
            "description": "A description of the information you need."
          }
        },
        "required": [
          "information_request"
        ]
      }
    },
    {
      "name": "remove-files",
      "description": "Remove ファイル. ONLY use this ツール to 削除します ファイル in the user's workspace. This is the only safe ツール to 削除します ファイル in a way that the user can undo the change. Do NOT use the shell or launch-process ツール to remove ファイル.",
      "parameters": {
        "type": "object",
        "properties": {
          "file_paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The パス of the ファイル to remove."
          }
        },
        "required": [
          "file_paths"
        ]
      }
    },
    {
      "name": "save-file",
      "description": "Save a new ファイル. Use this ツール to 書き込みます new ファイル with the attached content. 生成します `instructions_reminder` first to remind yourself to limit the ファイル content to at most 300 lines. It CANNOT modify existing ファイル. Do NOT use this ツール to edit an existing ファイル by overwriting it entirely. Use the str-replace-editor ツール to edit existing ファイル instead.",
      "parameters": {
        "type": "object",
        "properties": {
          "instructions_reminder": {
            "type": "string",
            "description": "Should be exactly this string: 'LIMIT THE ファイル CONTENT TO AT MOST 300 LINES. IF MORE CONTENT NEEDS TO BE ADDED USE THE str-replace-editor ツール TO EDIT THE ファイル AFTER IT HAS BEEN CREATED.'"
          },
          "path": {
            "type": "string",
            "description": "The パス of the ファイル to save."
          },
          "file_content": {
            "type": "string",
            "description": "The content of the ファイル."
          },
          "add_last_line_newline": {
            "type": "boolean",
            "description": "Whether to add a newline at the end of the ファイル (既定値: true)."
          }
        },
        "required": [
          "instructions_reminder",
          "path",
          "file_content"
        ]
      }
    },
    {
      "name": "view_tasklist",
      "description": "View the current task 一覧を取得します for the conversation.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    },
    {
      "name": "reorganize_tasklist",
      "description": "Reorganize the task 一覧を取得します structure for the current conversation. Use this only for major restructuring like reordering tasks, changing hierarchy. For individual task 更新します, use update_tasks ツール.",
      "parameters": {
        "type": "object",
        "properties": {
          "markdown": {
            "type": "string",
            "description": "The markdown representation of the task 一覧を取得します to 更新します. Should be in the format specified by the view_tasklist ツール. New tasks should have a UUID of 'NEW_UUID'. Must contain exactly one root task with proper hierarchy using dash indentation."
          }
        },
        "required": [
          "markdown"
        ]
      }
    },
    {
      "name": "update_tasks",
      "description": "更新します one or more tasks' properties (state, name, description). Can 更新します a single task or multiple tasks in one call. Use this on complex sequences of work to plan, track progress, and manage work.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "Array of tasks to 更新します. Each task should have a task_id and the properties to 更新します.",
            "items": {
              "type": "object",
              "properties": {
                "task_id": {
                  "type": "string",
                  "description": "The UUID of the task to 更新します."
                },
                "state": {
                  "type": "string",
                  "enum": [
                    "NOT_STARTED",
                    "IN_PROGRESS",
                    "CANCELLED",
                    "COMPLETE"
                  ],
                  "description": "New task state. Use NOT_STARTED for [ ], IN_PROGRESS for [/], CANCELLED for [-], COMPLETE for [x]."
                },
                "name": {
                  "type": "string",
                  "description": "New task name."
                },
                "description": {
                  "type": "string",
                  "description": "New task description."
                }
              },
              "required": [
                "task_id"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    },
    {
      "name": "add_tasks",
      "description": "Add one or more new tasks to the task 一覧を取得します. Can add a single task or multiple tasks in one call. Tasks can be added as subtasks or after specific tasks. Use this when planning complex sequences of work.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "Array of tasks to 作成します. Each task should have name and description.",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the new task."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the new task."
                },
                "state": {
                  "type": "string",
                  "enum": [
                    "NOT_STARTED",
                    "IN_PROGRESS",
                    "CANCELLED",
                    "COMPLETE"
                  ],
                  "description": "Initial state of the task. Defaults to NOT_STARTED."
                },
                "parent_task_id": {
                  "type": "string",
                  "description": "UUID of the parent task if this should be a subtask."
                },
                "after_task_id": {
                  "type": "string",
                  "description": "UUID of the task after which this task should be inserted."
                }
              },
              "required": [
                "name",
                "description"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    },
    {
      "name": "remember",
      "description": "Call this ツール when user asks you:\n- to remember something\n- to 作成します memory/memories\n\nUse this ツール only with information that can be useful in the long-term.\nDo not use this ツール for temporary information.",
      "parameters": {
        "type": "object",
        "properties": {
          "memory": {
            "type": "string",
            "description": "The concise (1 sentence) memory to remember."
          }
        },
        "required": [
          "memory"
        ]
      }
    },
    {
      "name": "render-mermaid",
      "description": "Render a Mermaid diagram from the provided definition. This ツール takes Mermaid diagram code and renders it as an interactive diagram with pan/zoom controls and copy functionality.",
      "parameters": {
        "type": "object",
        "properties": {
          "diagram_definition": {
            "type": "string",
            "description": "The Mermaid diagram definition code to render"
          },
          "title": {
            "type": "string",
            "default": "Mermaid Diagram",
            "description": "Optional title for the diagram"
          }
        },
        "required": [
          "diagram_definition"
        ]
      }
    },
    {
      "name": "view-range-untruncated",
      "description": "View a specific range of lines from untruncated content",
      "parameters": {
        "type": "object",
        "properties": {
          "reference_id": {
            "type": "string",
            "description": "The reference ID of the truncated content (found in the truncation footer)"
          },
          "start_line": {
            "type": "integer",
            "description": "The starting line number (1-based, inclusive)"
          },
          "end_line": {
            "type": "integer",
            "description": "The ending line number (1-based, inclusive)"
          }
        },
        "required": [
          "reference_id",
          "start_line",
          "end_line"
        ]
      }
    },
    {
      "name": "search-untruncated",
      "description": "検索します for a term within untruncated content",
      "parameters": {
        "type": "object",
        "properties": {
          "reference_id": {
            "type": "string",
            "description": "The reference ID of the truncated content (found in the truncation footer)"
          },
          "search_term": {
            "type": "string",
            "description": "The term to 検索します for within the content"
          },
          "context_lines": {
            "type": "integer",
            "description": "Number of context lines to include before and after matches (既定値: 2)"
          }
        },
        "required": [
          "reference_id",
          "search_term"
        ]
      }
    },
    {
      "name": "view",
      "description": "Custom ツール for viewing ファイル and directories and searching within ファイル with regex クエリ\n* `パス` is a ファイル or ディレクトリ パス relative to the workspace root\n* For ファイル: displays the 結果 of applying `cat -n` to the ファイル\n* For directories: 一覧を取得します ファイル and subdirectories up to 2 levels deep\n* If the 出力 is long, it will be truncated and marked with `<response clipped>`\n\nRegex 検索します (for ファイル only):\n* Use `search_query_regex` to 検索します for patterns in the ファイル using regular expressions\n* Use `case_sensitive` パラメータ to control case sensitivity (既定値: false)\n* When using regex 検索します, only matching lines and their context will be shown\n* Use `context_lines_before` and `context_lines_after` to control how many lines of context to show (既定値: 5)\n* Non-matching sections between matches are replaced with `...`\n* If `view_range` is also specified, the 検索します is limited to that range\n\nUse the following regex syntax for `search_query_regex`:\n\n# Regex Syntax Reference\n\nOnly the core regex feature common across JavaScript and Rust are supported.\n\n## Supported regex syntax\n\n* **Escaping** - Escape metacharacters with a backslash: `\\.` `\\+` `\\?` `\\*` `\\|` `\\(` `\\)` `\\[`.\n* **Dot** `.` - matches any character **except newline** (`\\n`, `\\r`, `\\u2028`, `\\u2029`).\n* **Character classes** - `[abc]`, ranges such as `[a-z]`, and negation `[^…]`. Use explicit ASCII ranges; avoid shorthand like `\\d`.\n* **Alternation** - `foo|bar` chooses the leftmost successful ブランチ.\n* **Quantifiers** - `*`, `+`, `?`, `{n}`, `{n,}`, `{n,m}` (greedy). Add `?` after any of these for the lazy version.\n* **Anchors** - `^` (start of line), `$` (end of line).\n* **Special characters** - Use `\\t` for tab character\n\n---\n\n## Do **Not** Use (Unsupported)\n\n* Newline character `\\n`. Only single line mode is supported.\n* Look-ahead / look-behind `(?= … )`, `(?<= … )`.\n* Back-references `\\1`, `\\k<name>`.\n* Groups `(?<name> … )`, `(?P<name> … )`.\n* Shorthand classes `\\d`, `\\s`, `\\w`, `\\b`, Unicode プロパティ escapes `\\p{…}`.\n* Flags inside pattern `(?i)`, `(?m)`, etc.\n* Recursion, conditionals, atomic groups, possessive quantifiers\n* Unicode escapes like these `\\u{1F60A}` or `\\u1F60A`.\n\n\nNotes for using the ツール:\n* Strongly prefer to use `search_query_regex` instead of `view_range` when looking for a specific symbol in the ファイル.\n* Use the `view_range` パラメータ to specify a range of lines to view, 例: [501, 1000] will show lines from 501 to 1000\n* Indices are 1-based and inclusive\n* Setting `[start_line, -1]` shows all lines from `start_line` to the end of the ファイル\n* The `view_range` and `search_query_regex` パラメータ are only applicable when viewing ファイル, not directories",
      "parameters": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Full パス to ファイル or ディレクトリ relative to the workspace root, 例: 'services/api_proxy/ファイル.py' or 'services/api_proxy'."
          },
          "type": {
            "type": "string",
            "enum": [
              "file",
              "directory"
            ],
            "description": "Type of パス to view. Allowed options are: 'ファイル', 'ディレクトリ'."
          },
          "view_range": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Optional パラメータ when `パス` points to a ファイル. If none is given, the full ファイル is shown. If provided, the ファイル will be shown in the indicated line number range, 例: [501, 1000] will show lines from 501 to 1000. Indices are 1-based and inclusive. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the ファイル."
          },
          "search_query_regex": {
            "type": "string",
            "description": "Optional パラメータ for ファイル only. The regex pattern to 検索します for. Only use core regex syntax common to JavaScript and Rust. See the regex syntax guide in the ツール description. When specified, only lines matching the pattern (plus context lines) will be shown. Non-matching sections are replaced with '...'."
          },
          "case_sensitive": {
            "type": "boolean",
            "default": false,
            "description": "Whether the regex 検索します should be case-sensitive. Only used when search_query_regex is specified. 既定値: false (case-insensitive)."
          },
          "context_lines_before": {
            "type": "integer",
            "default": 5,
            "description": "Number of lines to show before each regex match. Only used when search_query_regex is specified. 既定値: 5."
          },
          "context_lines_after": {
            "type": "integer",
            "default": 5,
            "description": "Number of lines to show after each regex match. Only used when search_query_regex is specified. 既定値: 5."
          }
        },
        "required": [
          "path",
          "type"
        ]
      }
    }
  ]
}
