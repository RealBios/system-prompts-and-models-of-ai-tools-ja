{
  "tools": [
    {
      "name": "restart_workflow",
      "description": "Restart (or start) a ワークフロー.",
      "parameters": {
        "properties": {
          "name": {
            "description": "The name of the ワークフロー.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      }
    },
    {
      "name": "search_filesystem",
      "description": "This ツール 検索します and 開きます the relevant ファイル for a codebase",
      "parameters": {
        "properties": {
          "class_names": {
            "default": [],
            "description": "一覧を取得します of specific class names to 検索します for in the codebase. Case-sensitive and supports exact matches only. Use this to find particular class definitions or their usages.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "code": {
            "default": [],
            "description": "一覧を取得します of exact code snippets to 検索します for in the codebase. Useful for finding specific implementations or patterns. Each snippet should be a complete code fragment, not just keywords.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "function_names": {
            "default": [],
            "description": "一覧を取得します of specific function or method names to 検索します for. Case-sensitive and supports exact matches only. Use this to locate function definitions or their invocations throughout the code.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "query_description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "A natural language クエリ to perform semantic similarity 検索します. Describe what you're looking for using plain English, 例: 'find エラー handling in database connections' or 'locate authentication middleware implementations'."
          }
        },
        "type": "object"
      }
    },
    {
      "name": "packager_tool",
      "description": "Installs the language (if needed) and installs or uninstalls a 一覧を取得します of libraries or project dependencies. Use this ツール to install dependencies instead of executing shell コマンド, or editing ファイル manually. Use this ツール with language_or_system=`system` to add system-dependencies instead of using `apt install`. Installing libraries for the first time also 作成します the necessary project ファイル automatically (like 'package.json', 'cargo.toml', etc). This will automatically reboot all ワークフローs.",
      "parameters": {
        "properties": {
          "dependency_list": {
            "default": [],
            "description": "The 一覧を取得します of system dependencies or libraries to install. System dependencies are packages (attribute パス) in the Nixpkgs package collection. 例 system dependencies: ['jq', 'ffmpeg', 'imagemagick']. Libraries are packages for a particular programming language. 例 libraries: ['express'], ['lodash'].",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "install_or_uninstall": {
            "description": "Whether to install or uninstall.",
            "enum": [
              "install",
              "uninstall"
            ],
            "type": "string"
          },
          "language_or_system": {
            "description": "The language for which to install/uninstall libraries, for 例  'nodejs', 'bun', 'python', etc. Use `system` to install/uninstall system dependencies.",
            "type": "string"
          }
        },
        "required": [
          "install_or_uninstall",
          "language_or_system"
        ],
        "type": "object"
      }
    },
    {
      "name": "programming_language_install_tool",
      "description": "If a program doesn't run, you may not have the programming language installed. Use programming_language_install_ツール to install it. If you need to use python, include 'python-3.11' in programming_languages. For Python 3.10, use 'python-3.10'. If you need to use Node.js, include 'nodejs-20' in programming_languages. For Node.js 18, use 'nodejs-18'. Note, this will also install the language's package manager, so don't install it separately.",
      "parameters": {
        "properties": {
          "programming_languages": {
            "description": "IDs of the programming languages to install",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "programming_languages"
        ],
        "type": "object"
      }
    },
    {
      "name": "create_postgresql_database_tool",
      "description": "When a project requires a PostgreSQL database, you can use this ツール to 作成します a database for it. After successfully creating a database, you will have access to the following environment variables: DATABASE_URL, PGPORT, PGUSER, PGPASSWORD, PGDATABASE, PGHOST\nYou can use these environment variables to connect to the database in your project.",
      "parameters": {
        "properties": {},
        "type": "object"
      }
    },
    {
      "name": "check_database_status",
      "description": "確認します if given databases are available and accessible.\nThis ツール is used to verify the connection and status of specified databases.",
      "parameters": {
        "properties": {},
        "type": "object"
      }
    },
    {
      "name": "str_replace_editor",
      "description": "Custom editing ツール for viewing, creating and editing ファイル\n* State is persistent across コマンド calls and discussions with the user\n* If `パス` is a ファイル, `view` displays the 結果 of applying `cat -n`. If `パス` is a ディレクトリ, `view` 一覧を取得します non-hidden ファイル and directories up to 2 levels deep\n* The `作成します` コマンド cannot be used if the specified `パス` already exists as a ファイル\n* If a `コマンド` 生成します a long 出力, it will be truncated and marked with `<response clipped>` \n* The `undo_edit` コマンド will revert the last edit made to the ファイル at `パス`\n\nNotes for using the `str_replace` コマンド:\n* The `old_str` パラメータ should match EXACTLY one or more consecutive lines from the original ファイル. Be mindful of whitespaces!\n* If the `old_str` パラメータ is not unique in the ファイル, the replacement will not be performed. Make sure to include enough context in `old_str` to make it unique\n* The `new_str` パラメータ should contain the edited lines that should replace the `old_str`",
      "parameters": {
        "properties": {
          "command": {
            "description": "The コマンド to run. Allowed options are: `view`, `作成します`, `str_replace`, `insert`, `undo_edit`.",
            "enum": [
              "view",
              "create",
              "str_replace",
              "insert",
              "undo_edit"
            ],
            "type": "string"
          },
          "file_text": {
            "description": "Required パラメータ of `作成します` コマンド, with the content of the ファイル to be created.",
            "type": "string"
          },
          "insert_line": {
            "description": "Required パラメータ of `insert` コマンド. The `new_str` will be inserted AFTER the line `insert_line` of `パス`.",
            "type": "integer"
          },
          "new_str": {
            "description": "Optional パラメータ of `str_replace` コマンド containing the new string (if not given, no string will be added). Required パラメータ of `insert` コマンド containing the string to insert.",
            "type": "string"
          },
          "old_str": {
            "description": "Required パラメータ of `str_replace` コマンド containing the string in `パス` to replace.",
            "type": "string"
          },
          "path": {
            "description": "Absolute パス to ファイル or ディレクトリ, 例: `/repo/ファイル.py` or `/repo`.",
            "type": "string"
          },
          "view_range": {
            "description": "Optional パラメータ of `view` コマンド when `パス` points to a ファイル. If none is given, the full ファイル is shown. If provided, the ファイル will be shown in the indicated line number range, 例: [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the ファイル.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          }
        },
        "required": [
          "command",
          "path"
        ],
        "type": "object"
      }
    },
    {
      "name": "bash",
      "description": "Run コマンド in a bash shell\n* When invoking this ツール, the contents of the \"コマンド\" パラメータ does NOT need to be XML-escaped.\n* You have access to a mirror of common linux and python packages via apt and pip.\n* State is persistent across コマンド calls and discussions with the user.\n* To inspect a particular line range of a ファイル, 例: lines 10-25, try 'sed -n 10,25p /パス/to/the/ファイル'.\n* Please avoid コマンド that may produce a very large amount of 出力.\n* Please run long lived コマンド in the background, 例: 'sleep 10 &' or start a server in the background.",
      "parameters": {
        "properties": {
          "command": {
            "description": "The bash コマンド to run. Required unless the ツール is being restarted.",
            "type": "string"
          },
          "restart": {
            "description": "Specifying true will restart this ツール. Otherwise, leave this unspecified.",
            "type": "boolean"
          }
        },
        "type": "object"
      }
    },
    {
      "name": "workflows_set_run_config_tool",
      "description": "Configure a background task that 実行します a shell コマンド.\nThis is useful for starting development servers, build processes, or any other\nlong-running tasks needed for the project.\nIf this is a server, ensure you specify the port number it listens on in the `wait_for_port` field so\nthe ワークフロー isn't considered started until the server is ready to accept connections.\n\n例:\n- For a Node.js server: set `name` to 'Server', `コマンド` to 'npm run dev', and `wait_for_port` to 5000\n- For a Python スクリプト: set name to 'Data Processing' and コマンド to 'python process_data.py'\n\nMultiple tasks can be configured and they will all 実行します in parallel when the project is started.\nAfter configuring a task, it will automatically start executing in the background.\n\nALWAYS serve the app on port 5000, even if there are problems serving that port: it is the only port that is not firewalled.\n",
      "parameters": {
        "properties": {
          "command": {
            "description": "The shell コマンド to 実行します. This will run in the background when the project is started.",
            "type": "string"
          },
          "name": {
            "description": "A unique name to identify the コマンド. This will be used to keep a track of the コマンド.",
            "type": "string"
          },
          "wait_for_port": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "If the コマンド starts a process that listens on a port, specify the port number here.\nThis allows the system to wait for the port to be ready before considering the コマンド fully started."
          }
        },
        "required": [
          "name",
          "command"
        ],
        "type": "object"
      }
    },
    {
      "name": "workflows_remove_run_config_tool",
      "description": "Remove previously added named コマンド",
      "parameters": {
        "properties": {
          "name": {
            "description": "The name of the コマンド to remove.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      }
    },
    {
      "name": "execute_sql_tool",
      "description": "This ツール allows you to 実行します SQL queries, fix database エラー and access the database スキーマ.\n\n## Rules of usage:\n1. Always prefer using this ツール to fix database エラー vs fixing by writing code like db.drop_table(table_name)\n2. Provide clear, well-formatted SQL queries with proper syntax\n3. Focus on database interactions, data manipulation, and クエリ optimization\n\n## When to use:\n1. To fix and troubleshoot database-related Issue\n2. To explore database スキーマ and relationships\n3. To 更新します or modify data in the database\n4. To run ad-hoc single-use SQL code\n\n## When not to use:\n1. For non-SQL database operations (NoSQL, ファイル-based databases)\n2. For database migrations. Use a migration ツール like Drizzle or flask-migrate instead\n\n## 例 usage:\n\n### 例 1: Viewing database information\nsql_query: SELECT * FROM customers WHERE region = 'North';\n\n### 例 2: Running ad-hoc SQL queries\nsql_query:  EXPLAIN 分析します SELECT orders.*, customers.name\n            FROM orders\n            JOIN customers ON orders.customer_id = customers.id;\n\n### 例 3: Inserting data into the database\nsql_query:  INSERT INTO products (name, price, category)\n            VALUES ('New Product', 29.99, 'Electronics');",
      "parameters": {
        "properties": {
          "sql_query": {
            "description": "The SQL クエリ to be executed",
            "type": "string"
          }
        },
        "required": [
          "sql_query"
        ],
        "type": "object"
      }
    },
    {
      "name": "suggest_deploy",
      "description": "Call this function when you think the project is in a state ready for deployment.\nThis will suggest to the user that they can deploy their project.\nThis is a terminal action - once called, your task is complete and\nyou should not take any further actions to verify the deployment.\nThe deployment process will be handled automatically by Replit Deployments.\n\n## Rules of usage:\n1. Use this ツール once you've validated that the project works as expected.\n2. The deployment process will be handled automatically by Replit Deployments.\n\n## When to use:\n1. When the project is ready for deployment.\n2. When the user asks to deploy the project.\n\n## More information:\n- The user needs to manually initiate the deployment.\n- Replit Deployments will handle building the application, hosting, TLS, health 確認します.\n- Once this ツール is called, there is no need to do any follow up steps or verification.\n- Once deployed, the app will be available under a `.replit.app` domain,\n  or a custom domain if one is configured.",
      "parameters": {
        "description": "Empty パラメータ class since suggest deploy doesn't need any パラメータ.",
        "properties": {},
        "type": "object"
      }
    },
    {
      "name": "report_progress",
      "description": "Call this function once the user explicitly confirms that a major feature or task is complete.\nDo not call it without the user's confirmation.\nProvide a concise summary of what was accomplished in the 'summary' field.\nThis ツール will ask user for the next thing to do. Don't do anything after this ツール.",
      "parameters": {
        "properties": {
          "summary": {
            "description": "要約します your recent changes in a maximum of 5 items. Be really concise, use no more than 30 words. Break things into multiple lines.\nPut a ✓ before every item you've done recently and → for the items in progress, be very short and concise, don't use more than 50 words. Don't use emojis.\nUse simple, everyday language that matches the user's language. Avoid technical terms, as users are non-technical.\nAsk user what to do next in the end.",
            "type": "string"
          }
        },
        "required": [
          "summary"
        ],
        "type": "object"
      }
    },
    {
      "name": "web_application_feedback_tool",
      "description": "This ツール captures a screenshot and 確認します ログ to verify whether the web application is running in the Replit ワークフロー.\n\nIf the application is running, the ツール displays the app, asks user a question, and waits for user's response.\nUse this ツール when the application is in a good state and the requested task is complete to avoid unnecessary delays.",
      "parameters": {
        "properties": {
          "query": {
            "description": "The question you will ask the user.\n\nUse simple, everyday language that matches the user's language. Avoid technical terms, as users are non-technical.\n要約します your recent changes in a maximum of 5 items. Be really concise, use no more than 30 words. Break things into multiple lines.\nPut a ✓ before every item you've done recently and → for the items in progress, be very short and concise, don't use more than 50 words. Don't use emojis.\nLimit yourself to asking only one question at a time.\nYou have access to ワークフロー state, console ログ, and screenshots—retrieve them yourself instead of asking the user.\nAsk for user 入力 or confirmation on next steps. Do not request details.",
            "type": "string"
          },
          "website_route": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The specific route or パス of the website you're asking about, if it's 差分erent from the root URL ('/'). Include the leading slash. 例: '/dashboard' or '/products/一覧を取得します'"
          },
          "workflow_name": {
            "description": "The name of the ワークフロー running the server. Used to determine the port of the website.",
            "type": "string"
          }
        },
        "required": [
          "query",
          "workflow_name"
        ],
        "type": "object"
      }
    },
    {
      "name": "shell_command_application_feedback_tool",
      "description": "This ツール allows you to 実行します interactive shell コマンド and ask questions about the 出力 or behavior of CLI applications or interactive Python programs.\n\n## Rules of usage:\n1. Provide clear, concise interactive コマンド to 実行します and specific questions about the 結果 or interaction.\n2. Ask one question at a time about the interactive behavior or 出力.\n3. Focus on interactive functionality, user 入力/出力, and real-time behavior.\n4. Specify the exact コマンド to run, including any necessary arguments or flags to start the interactive session.\n5. When asking about Python programs, include the ファイル name and any required コマンド-line arguments to start the interactive mode.\n\n## When to use:\n1. To test and verify the functionality of interactive CLI applications or Python programs where user 入力 and real-time interaction are required.\n2. To 確認します if a program responds correctly to user 入力 in an interactive shell environment.\n\n## When not to use:\n1. For non-interactive コマンド or スクリプト that don't require user 入力.\n2. For API testing or web-based interactions.\n3. For shell コマンド that 開きます a native desktop VNC window.\n\n## 例 usage:\nコマンド: python interactive_script.py\nQuestion: When プロンプトed, can you enter your name and receive a personalized greeting?\n\nコマンド: ./text_adventure_game\nQuestion: Are you able to make choices that affect the story progression?\n\nコマンド: python -i data_analysis.py\nQuestion: Can you interactively クエリ and manipulate the loaded data set?",
      "parameters": {
        "properties": {
          "query": {
            "description": "The question or feedback request about the shell application",
            "type": "string"
          },
          "shell_command": {
            "description": "The shell コマンド to be executed before asking for feedback",
            "type": "string"
          },
          "workflow_name": {
            "description": "The ワークフロー name for this コマンド, must be an existing ワークフロー.",
            "type": "string"
          }
        },
        "required": [
          "query",
          "shell_command",
          "workflow_name"
        ],
        "type": "object"
      }
    },
    {
      "name": "vnc_window_application_feedback",
      "description": "This ツール allows you to 実行します interactive desktop application, which will be accessed through VNC and displayed to the user.\nYou can ask questions about the 出力 or behavior of this application.\n\n## Rules of usage:\n1. Provide clear, concise コマンド to 実行します the application, and specific questions about the 結果 or interaction.\n2. Ask one question at a time about the interactive behavior or 出力.\n3. Focus on interactive functionality, user 入力/出力, and real-time behavior.\n4. Specify the exact コマンド to run, including any necessary arguments or flags.\n\n## When to use:\n1. To test and verify the functionality of interactive desktop programs, where user 入力 and real-time interactions are required.\n2. To 確認します if a program responds correctly to user 入力 in an attached VNC window.\n\n## When not to use:\n1. For non-interactive コマンド or スクリプト that don't require user 入力.\n2. For API testing or web-based interactions.\n3. For shell コマンド that don't 開きます a native desktop VNC window.\n\n## 例 usage:\nコマンド: python pygame_snake.py\nQuestion: Do the keyboard events change the snake direction on the screen?\n\nコマンド: ./opencv_face_detection\nQuestion: Do you see a photo with green rectangles around detected faces?",
      "parameters": {
        "properties": {
          "query": {
            "description": "The question or feedback request about a native window application, visible through VNC",
            "type": "string"
          },
          "vnc_execution_command": {
            "description": "The VNC shell コマンド to be executed before asking for feedback; this shell コマンド should spawn the desktop window",
            "type": "string"
          },
          "workflow_name": {
            "description": "The ワークフロー name for this VNC shell コマンド, must be an existing ワークフロー.",
            "type": "string"
          }
        },
        "required": [
          "query",
          "vnc_execution_command",
          "workflow_name"
        ],
        "type": "object"
      }
    },
    {
      "name": "ask_secrets",
      "description": "Ask user for the secret API keys needed for the project.\nIf a secret is missing, use this ツール as soon as possible.\nThe secrets will be added to environment variables.\nThis ツール is very expensive to run.\n\nGOOD 例:\n- To set up secure payments with Stripe, we need a STRIPE_SECRET_KEY.\n  This key will be used to securely process payments and\n  manage subscriptions in your application.\n- To enable SMS price alerts, we need Twilio API credentials TWILIO_ACCOUNT_SID,\n  TWILIO_AUTH_TOKEN, and TWILIO_PHONE_NUMBER. These will be used to send SMS\n  notifications when price targets are reached.\n- To build applications using OpenAI モデル we need an OPENAI_API_KEY.\n\nBAD 例 (Do Not Use):\n- PHONE_NUMBER, EMAIL_ADDRESS, or PASSWORD\n    for this type of variables, you should ask the user directly\n    through the user_response ツール.\n- REPLIT_DOMAINS or REPL_ID\n    these secrets are always present, so you never need to ask for\n    them.\n",
      "parameters": {
        "properties": {
          "secret_keys": {
            "description": "Array of secret key identifiers needed for the project (e.g., [\"OPENAI_API_KEY\", \"GITHUB_TOKEN\"])",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "user_message": {
            "description": "The message to send back to the user explaining the reason for needing these secret keys. If you haven't already, briefly introduce what a secret key is in general terms, assume the user never registered for an API key before. Please phrase your question respectfully.",
            "type": "string"
          }
        },
        "required": [
          "secret_keys",
          "user_message"
        ],
        "type": "object"
      }
    },
    {
      "name": "check_secrets",
      "description": "確認します if a given secret exists in the environment.\nThis ツール is used to verify the presence of a secret without exposing its actual value.\n",
      "parameters": {
        "properties": {
          "secret_keys": {
            "description": "The secret keys to 確認します in the environment.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "secret_keys"
        ],
        "type": "object"
      }
    }
  ],
  "internal_tags": [
    {
      "name": "View",
      "description": "Contains ファイル system information and リポジトリ details"
    },
    {
      "name": "policy_spec",
      "description": "Contains communication, proactiveness and data integrity policies"
    },
    {
      "name": "file_system",
      "description": "Shows ディレクトリ structure"
    },
    {
      "name": "repo_overview",
      "description": "Contains code summaries"
    },
    {
      "name": "important",
      "description": "Contains key policy reminders"
    },
    {
      "name": "workflow_console_logs",
      "description": "Contains ログ from running ワークフローs"
    },
    {
      "name": "automatic_updates",
      "description": "Contains system-generated 更新します"
    },
    {
      "name": "webview_console_logs",
      "description": "Contains ログ from the user's browser"
    },
    {
      "name": "function_results",
      "description": "Contains 結果 of function/ツール calls"
    }
  ]
}
