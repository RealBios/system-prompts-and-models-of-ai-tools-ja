name: Upstream Sync & JA Translate

on:
  schedule:
    - cron: '0 15 * * *'  # 00:00 JST
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-and-translate:
    runs-on: ubuntu-latest
    steps:
      # 1) Fork 側をチェックアウト（origin）
      - name: Checkout fork (origin)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) upstream を追加して取得
      - name: Add upstream and fetch
        run: |
          git remote add upstream https://github.com/x1xhlol/system-prompts-and-models-of-ai-tools.git || true
          git fetch upstream main

      # 3) upstream/main から作業ブランチ作成
      - name: Create working branch from upstream/main
        id: mkbranch
        run: |
          BRANCH="bot/ja-sync-$(date -u +%Y%m%d-%H%M%S)"
          git checkout -B "$BRANCH" upstream/main
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      # 4) フォークの .github（翻訳キット）を上書きで持ってくる
      - name: Import JA kit (.github) from fork (origin)
        run: |
          git fetch origin
          git checkout origin/main -- .github || git checkout origin/master -- .github
          test -f .github/translation/translate_repo.py

      # 5) Python セットアップ
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 6) 依存インストール
      - name: Install translation deps
        run: |
          pip install -r .github/translation/requirements.txt

      # 7) 翻訳を実行（同名ファイルで内容日本語化／構造不変）
      - name: Run translator (same filenames, structure-preserving)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}  # 任意
          DEEPL_API_KEY:  ${{ secrets.DEEPL_API_KEY }}   # 任意
        run: |
          python .github/translation/translate_repo.py
          
      # 8) jq を確実に用意（既にあればスキップ）
      - name: Ensure jq
        run: |
          set -eux
          if ! command -v jq >/dev/null 2>&1; then
            for i in 1 2 3; do
              sudo apt-get update -y && sudo apt-get install -y jq && break || sleep 5
            done
          fi
          jq -V
      # Validate の step をこの版に差し替え
      - name: Validate JSON files (skip known-bad; JSON5 auto-repair)
        shell: bash
        run: |
          set -euo pipefail

          # 例外スキップ（当面）
          skip1='Lovable/Agent Tools.json'

          # json5 を入れて「緩いパース→厳密JSONへ再シリアライズ」を試みる
          python - <<'PY'
      import sys, json, pathlib, subprocess
      from json import JSONDecodeError

      try:
          import json5  # type: ignore
          HAS_JSON5 = True
      except Exception:
          HAS_JSON5 = False

      def try_fix(p: pathlib.Path):
          t = p.read_text(encoding='utf-8', errors='replace')
          # まず厳密JSON
          try:
              json.loads(t)
              return False  # 既にOK
          except JSONDecodeError:
              pass

          if not HAS_JSON5:
              return False

          # JSON5でパースできたら、厳密JSONで書き戻して修復
          try:
              obj = json5.loads(t)
              p.write_text(json.dumps(obj, ensure_ascii=False, indent=2) + "\n", encoding='utf-8')
              return True
          except Exception:
              return False

      # 対象 *.json を走査
      files = subprocess.check_output(["git","ls-files","-z","*.json"]).decode("utf-8","replace").split("\x00")
      for f in filter(None, files):
          p = pathlib.Path(f)
          if f == "Lovable/Agent Tools.json":
              # 当面スキップ（後で手当て）
              continue
          changed = try_fix(p)
          if changed:
              print(f"[auto-fixed] {f}")
      PY

          # jqで最終検証（NUL区切り・スペース含むパス安全対応）
          fail=0
          while IFS= read -r -d '' f; do
            # 例外はスキップ
            if [ "$f" = "$skip1" ]; then
              echo "Skip (known-bad for now): $f"
              continue
            fi
            echo "Validate: $f"
            if jq -e . "$f" >/dev/null 2> .jq_err.txt; then
              echo "OK"
            else
              echo "ERROR in: $f"
              cat .jq_err.txt
              line=$(sed -n 's/.* at line \([0-9]\+\), column .*/\1/p' .jq_err.txt | tail -1 || true)
              if [ -n "${line:-}" ]; then
                start=$((line-3)); [ $start -lt 1 ] && start=1
                end=$((line+2))
                echo "----- context ${start}-${end} -----"
                nl -ba "$f" | sed -n "${start},${end}p"
                echo "----------------------------------"
              fi
              fail=1
            fi
          done < <(git ls-files -z '*.json')
          exit $fail

      # 10) PR を作成
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.mkbranch.outputs.branch }}
          title: "Upstream sync + 日本語化（自動）"
          body: |
            - Upstream 最新を取り込み
            - 同名ファイルで本文を日本語化（構造不変）
            - JSONは `description` のみ日本語化、TXT/MDは本文日本語化（コードブロック保持）
            - ライセンスは GPL-3.0 を継承
          labels: auto-sync,i18n
