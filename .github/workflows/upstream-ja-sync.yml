name: Upstream Sync & JA Translate

on:
  schedule:
    - cron: '0 15 * * *'  # 00:00 JST
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-and-translate:
    runs-on: ubuntu-latest
    steps:
      # 1) Fork 側をチェックアウト（origin）
      - name: Checkout fork (origin)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) upstream を追加して取得
      - name: Add upstream and fetch
        run: |
          git remote add upstream https://github.com/x1xhlol/system-prompts-and-models-of-ai-tools.git || true
          git fetch upstream main
          git fetch origin

      # 3) upstream/main から作業ブランチ作成
      - name: Create working branch from upstream/main
        id: mkbranch
        run: |
          BRANCH="bot/ja-sync-$(date -u +%Y%m%d-%H%M%S)"
          git checkout -B "$BRANCH" upstream/main
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"

      # 4) フォークの .github（翻訳キット）を上書きで持ってくる
      - name: Import JA kit (.github) from fork (origin)
        run: |
          git checkout origin/main -- .github || git checkout origin/master -- .github
          test -f .github/translation/translate_repo.py

      # 4.1) フォークで直したJSONを個別に取り込む（恒久修正を反映）
      - name: Bring fixed JSON from fork (origin)
        run: |
          set -eux
          # 必要に応じて対象ファイルを追加
          git checkout origin/main -- "Traycer AI/phase_mode_tools.json" "Lovable/Agent Tools.json" || true
          # Runner が読む内容を確認（問題の行周辺）
          nl -ba 'Traycer AI/phase_mode_tools.json' | sed -n '285,305p' || true

      # 5) Python セットアップ
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 6) 依存インストール（json5 は自動修復用の保険）
      - name: Install translation deps
        run: |
          pip install -r .github/translation/requirements.txt
          pip install json5 || true

      # 7) 翻訳を実行（同名ファイルで内容日本語化／構造不変）
      - name: Run translator (same filenames, structure-preserving)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ENGINE_ORDER: openai
          TRANSLATE_FILE_DELAY: 1  # ファイル間待機を1秒に短縮
        run: |
          # 高速化設定で翻訳実行
          python .github/translation/translate_repo.py
    
      # 8) jq を確実に用意（既にあればスキップ）
      - name: Ensure jq
        run: |
          set -eux
          if ! command -v jq >/dev/null 2>&1; then
            for i in 1 2 3; do
              sudo apt-get update -y && sudo apt-get install -y jq && break || sleep 5
            done
          fi
          jq -V

      # 9) JSON 自動修復（JSON5 -> 厳密JSON）＋ 厳密検証（NUL区切り対応）
      - name: Validate JSON files (auto-repair + strict check)
        shell: bash
        run: |
          set -euo pipefail

          # --- 自動修復（JSON5で読めたら厳密JSONに再整形） ---
          python - <<'PY'
          import sys, json, pathlib, subprocess
          from json import JSONDecodeError
          try:
              import json5  # type: ignore
              HAS_JSON5 = True
          except Exception:
              HAS_JSON5 = False

          def try_fix(p: pathlib.Path):
              t = p.read_text(encoding='utf-8', errors='replace')
              # まず厳密JSON
              try:
                  json.loads(t)
                  return False  # 既にOK
              except JSONDecodeError:
                  pass
              if not HAS_JSON5:
                  return False
              # JSON5でパースできたら、厳密JSONで書き戻し
              try:
                  import json5  # type: ignore
                  obj = json5.loads(t)
                  p.write_text(json.dumps(obj, ensure_ascii=False, indent=2) + "\n", encoding='utf-8')
                  return True
              except Exception:
                  return False

          files = subprocess.check_output(["git","ls-files","-z","*.json"]).decode("utf-8","replace").split("\x00")
          for f in filter(None, files):
              p = pathlib.Path(f)
              changed = try_fix(p)
              if changed:
                  print(f"[auto-fixed] {f}")
          PY

          # --- 厳密検証（jq, NUL区切り・空白含むパス安全） ---
          fail=0
          while IFS= read -r -d '' f; do
            echo "Validate: $f"
            if jq -e . "$f" >/dev/null 2> .jq_err.txt; then
              echo "OK"
            else
              echo "ERROR in: $f"
              cat .jq_err.txt
              line=$(sed -n 's/.* at line \([0-9]\+\), column .*/\1/p' .jq_err.txt | tail -1 || true)
              if [ -n "${line:-}" ]; then
                start=$((line-3)); [ $start -lt 1 ] && start=1
                end=$((line+2))
                echo "----- context ${start}-${end} -----"
                nl -ba "$f" | sed -n "${start},${end}p"
                echo "----------------------------------"
              fi
              fail=1
            fi
          done < <(git ls-files -z '*.json')
          exit $fail

      # 9.9) 作業ブランチを先にリモートへ作成（存在しなくてもOK）
      - name: Push working branch (ensure remote exists)
        run: |
          set -eux
          git push -u origin "${{ steps.mkbranch.outputs.branch }}" || true

      # 9.95) 一時ファイルを掃除（PRに混ざらないように）
      - name: Clean temp files
        run: rm -f .jq_err.txt || true

      # 10) PR を作成（base を明示）
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: ${{ github.event.repository.default_branch }}  # 例: main
          branch: ${{ steps.mkbranch.outputs.branch }}         # さっき push した作業ブランチ
          title: "Upstream sync + 日本語化（自動）"
          body: |
            - Upstream 最新を取り込み
            - 同名ファイルで本文を日本語化（構造不変）
            - JSONは `description` のみ日本語化、TXT/MDは本文日本語化（コードブロック保持）
            - ライセンスは GPL-3.0 を継承
          labels: auto-sync,i18n
          delete-branch: true
