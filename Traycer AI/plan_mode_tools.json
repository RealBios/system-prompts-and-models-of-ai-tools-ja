{
  "list_dir": {
    "description": "一覧を取得します the contents of a ディレクトリ. The quick ツール to use for discovery, before using more targeted ツール like codebase 検索します or ファイル reading. Useful to try to understand the ファイル structure before diving deeper into specific ファイル. Can be used to explore the codebase.",
    "parameters": {
      "path": {
        "description": "The パス of the ディレクトリ to 一覧を取得します contents for. Use absolute パス.",
        "sanitizePath": true,
        "type": "string"
      },
      "recursive": {
        "description": "Whether to 一覧を取得します ファイル recursively. Use 'true' for recursive listing, 'false' or omit for top-level only.",
        "type": "boolean"
      }
    },
    "required": [
      "path",
      "recursive"
    ]
  },
  "file_search": {
    "description": "Fast ファイル 検索します based on fuzzy matching against ファイル パス. Use if you know part of the ファイル パス but don't know where it's located exactly. Response will be capped to 10 結果. Make your クエリ more specific if need to フィルタします 結果 further. It is always better to speculatively perform multiple 検索します as a batch that are potentially useful.",
    "parameters": {
      "pattern": {
        "description": "Fuzzy filename to 検索します for",
        "type": "string"
      }
    },
    "required": [
      "pattern"
    ]
  },
  "web_search": {
    "description": "Performs web 検索します to find relevant information and documentation for the given クエリ. This ツール helps gather external knowledge useful for solving tasks, especially for obtaining the latest information or documentation.",
    "parameters": {
      "query": {
        "description": "The 検索します クエリ to look up on the web.",
        "type": "string"
      }
    },
    "required": [
      "query"
    ]
  },
  "grep_search": {
    "description": "Fast text-based regex 検索します that finds exact pattern matches within ファイル or directories, utilizing the ripgrep コマンド for efficient searching. 結果 will be formatted in the style of ripgrep and can be configured to include line numbers and content. To avoid overwhelming 出力, the 結果 are capped at 50 matches. Use the include patterns to フィルタします the 検索します scope by ファイル type or specific パス. This is best for finding exact text matches or regex patterns. More precise than codebase 検索します for finding specific strings or patterns. This is preferred over codebase 検索します when we know the exact symbol/function name/etc. to 検索します in some set of directories/ファイル types.",
    "parameters": {
      "includePattern": {
        "anyOf": [
          {
            "description": "Glob pattern for ファイル to include (e.g., '*.ts' for TypeScript ファイル). If not provided, it will 検索します all ファイル (*).",
            "type": "string"
          },
          {
            "type": "null"
          }
        ]
      },
      "regex": {
        "description": "The regex pattern to 検索します for.",
        "type": "string"
      }
    },
    "required": [
      "regex",
      "includePattern"
    ]
  },
  "think": {
    "description": "Use the ツール to think about something. It will not obtain new information or make any changes to the リポジトリ, but just ログ the thought. Use it when complex reasoning or brainstorming is needed.",
    "parameters": {
      "thought": {
        "description": "Your thoughts.",
        "type": "string"
      }
    },
    "required": [
      "thought"
    ]
  },
  "read_file": {
    "description": "読み取ります the contents of ファイル at the specified パス. Use this when you need to examine the contents of any existing ファイル, for 例 to 分析します code, review text ファイル, or 抽出します information from configuration ファイル. For large ファイル, the system will provide a structured summary with line ranges and brief descriptions of each section instead of the full content. You can then request specific line ranges after reviewing the summary using the read_partial_file ツール. Automatically 抽出します raw text from PDF and DOCX ファイル. May not be suitable for other types of binary ファイル, as it 返します the raw content as a string. It is always better to speculatively 読み取ります multiple ファイル as a batch that are potentially useful.",
    "parameters": {
      "paths": {
        "description": "The パス of the ファイル to 読み取ります. Use absolute パス.",
        "items": {
          "additionalProperties": false,
          "properties": {
            "includeDiagnostics": {
              "default": false,
              "description": "Whether to collect diagnostics including エラー, 警告, and lint suggestions, by analyzing its code using the built-in LSP. 返します true only when you need to identify and resolve specific Issue.",
              "type": "boolean"
            },
            "path": {
              "sanitizePath": true,
              "type": "string"
            }
          },
          "required": [
            "path",
            "includeDiagnostics"
          ],
          "type": "object"
        },
        "jsonParse": true,
        "type": "array"
      }
    },
    "required": [
      "paths"
    ]
  },
  "read_partial_file": {
    "description": "読み取ります specific line ranges from ファイル at the specified パス. Use this when you need to examine only portions of ファイル rather than their entire contents, which is useful for when you only need to focus on specific sections of code, configuration ファイル, or text documents. Specify the startLine and numberOfLines properties for each パス to control exactly which portion of the ファイル you want to 読み取ります. This is more efficient than reading entire ファイル when you only need specific sections.",
    "parameters": {
      "paths": {
        "description": "The パス of the ファイル to 読み取ります. Each item is an object with パス and optional startLine and endLine properties to specify line ranges.",
        "items": {
          "additionalProperties": false,
          "properties": {
            "includeDiagnostics": {
              "default": false,
              "description": "Whether to collect diagnostics including エラー, 警告, and lint suggestions, by analyzing its code using the built-in LSP. 返します true only when you need to identify and resolve specific Issue.",
              "type": "boolean"
            },
            "numberOfLines": {
              "description": "The number of lines to 読み取ります from the start line. Allowed values are 300, 500, 700, or 900",
              "type": "number"
            },
            "path": {
              "description": "パス of the ファイル to 読み取ります. Use absolute パス.",
              "sanitizePath": true,
              "type": "string"
            },
            "startLine": {
              "description": "The starting line number to 読み取ります from (1-indexed). Optional - if omitted, starts from line 1.",
              "type": "number"
            }
          },
          "required": [
            "path",
            "numberOfLines",
            "startLine",
            "includeDiagnostics"
          ],
          "type": "object"
        },
        "jsonParse": true,
        "type": "array"
      }
    },
    "required": [
      "paths"
    ]
  },
  "file_outlines": {
    "description": "Get a symbol outline for all ファイル at the top level of a specified ディレクトリ. This can be particularly useful when you need to understand the code present in multiple ファイル at a high-level.",
    "parameters": {
      "path": {
        "description": "The パス of the ディレクトリ to get ファイル outlines for. Use absolute パス.",
        "sanitizePath": true,
        "type": "string"
      }
    },
    "required": [
      "path"
    ]
  },
  "find_references": {
    "description": "Find references (usage, mentions etc.) of a function, method, class, interface etc. Use this ツール to jump to the all the locations where the given symbol is being used in the codebase. Software developers use this capability extensively to explore large codebases with precision. Prefer this over codebase_search when you need to lookup references of a symbol (anything tracked by LSP). You need to provide the ファイル and line number wherever the symbol is MENTIONED. Find references ツール will automatically take you to the relavant location. This works for locations both internal or external to the project.",
    "parameters": {
      "line": {
        "anyOf": [
          {
            "description": "The line number where the symbol is mentioned. This field is optional. If omitted, it will match the first occurence of this symbol in the ファイル.",
            "type": "number"
          },
          {
            "type": "null"
          }
        ]
      },
      "path": {
        "anyOf": [
          {
            "description": "The パス of the ファイル where the symbol is mentioned. If omitted, it will match the last ファイル with this symbol in the chat. Use absolute パス.",
            "sanitizePath": true,
            "type": "string"
          },
          {
            "type": "null"
          }
        ]
      },
      "symbol": {
        "description": "The name of the symbol for which you want to find references.",
        "type": "string"
      }
    },
    "required": [
      "symbol",
      "path",
      "line"
    ]
  },
  "go_to_definition": {
    "description": "Go to Definition of a function, method, class, interface etc. Use this ツール to jump to the defintion of a symbol. Software developers use this capability extensively to explore large codebases with precision. Prefer this over codebase_search when you need to lookup definitions of a symbol (anything tracked by LSP). You may provide the ファイル and line number wherever the symbol is MENTIONED. This ツール can also work just on the symbol alone although providing ファイル and symbols will give more precise 結果. Go to Definition ツール will automatically take you to the relavant location. This works for locations both internal or external to the project.",
    "parameters": {
      "line": {
        "anyOf": [
          {
            "description": "The line number where the symbol is mentioned. This field is optional. If omitted, it will match the first occurence of this symbol in the ファイル.",
            "type": "number"
          },
          {
            "type": "null"
          }
        ]
      },
      "path": {
        "anyOf": [
          {
            "description": "The パス of the ファイル where the symbol is mentioned. If omitted, it will match the last ファイル with this symbol in the chat. Use absolute パス.",
            "sanitizePath": true,
            "type": "string"
          },
          {
            "type": "null"
          }
        ]
      },
      "symbol": {
        "description": "The name of the symbol for which you want to find the definition.",
        "type": "string"
      }
    },
    "required": [
      "symbol",
      "path",
      "line"
    ]
  },
  "go_to_implementations": {
    "description": "Use the built-in LSP to \"Go to Implementations\" of a given abstract class or function symbol.",
    "parameters": {
      "line": {
        "anyOf": [
          {
            "description": "The line number where the symbol is mentioned. This field is optional. If omitted, it will match the first occurence of this symbol in the ファイル.",
            "type": "number"
          },
          {
            "type": "null"
          }
        ]
      },
      "path": {
        "anyOf": [
          {
            "description": "The パス of the ファイル where the symbol is mentioned. If omitted, it will match the last ファイル with this symbol in the chat. Use absolute パス.",
            "sanitizePath": true,
            "type": "string"
          },
          {
            "type": "null"
          }
        ]
      },
      "symbol": {
        "description": "The name of the symbol for which you want to find the implementations.",
        "type": "string"
      }
    },
    "required": [
      "symbol",
      "path",
      "line"
    ]
  },
  "get_diagnostics": {
    "description": "Retrieve diagnostics for multiple ファイル matching a glob pattern, including エラー, 警告, and lint suggestions, by analyzing its code using the built-in LSP. Use this functionality to identify and resolve specific Issue across multiple ファイル that match a specific pattern.",
    "parameters": {
      "directories": {
        "description": "Directories from which to retrieve diagnostics. Use absolute パス. Provide 開きます workspace directories if you want to 検索します all ファイル in the workspace.",
        "items": {
          "description": "ディレクトリ to 検索します for ファイル. Use absolute パス.",
          "type": "string"
        },
        "type": "array"
      },
      "includePattern": {
        "anyOf": [
          {
            "description": "Glob pattern for ファイル to include (e.g., '*.ts' for TypeScript ファイル). If not provided, it will 検索します all ファイル (*).",
            "type": "string"
          },
          {
            "type": "null"
          }
        ]
      },
      "severity": {
        "anyOf": [
          {
            "description": "Severity level of diagnostics to retrieve.",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          {
            "description": "If not provided, 返します all severity levels.",
            "type": "null"
          }
        ]
      }
    },
    "required": [
      "directories",
      "includePattern",
      "severity"
    ]
  },
  "agent": {
    "description": "作成します a specialized agent for specific tasks",
    "parameters": {
      "description": {
        "description": "A short (3-5 word) description of the task",
        "type": "string"
      },
      "directoryMaps": {
        "description": "一覧を取得します of full パス of directories that are a good starting point for the task. Agents will be given the 一覧を取得します of ファイル and sub-directories in the フォルダ. Do not assume パス, only add パス if you have come across them in previous conversations.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "name": {
        "description": "Name of the agent. Name them like \"Agent <identifier> - <3-5 letter description of their role>\"",
        "type": "string"
      },
      "prompt": {
        "description": "The task for the agent to perform",
        "type": "string"
      },
      "relevantFiles": {
        "description": "一覧を取得します of full パス of ファイル that are relevant for the task. Agents will be provided with the content of the ファイル. Do not assume パス, only add パス if you have come across them in previous conversations. Use absolute パス.",
        "items": {
          "sanitizePath": true,
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "description",
      "prompt",
      "name",
      "directoryMaps",
      "relevantFiles"
    ]
  },
  "hand_over_to_approach_agent": {
    "description": "Use the ツール to indicate that you have explored the high-level structure of the codebase and now ready to hand over to the approach agent to 書き込みます the high-level approach.",
    "parameters": {
      "reason": {
        "description": "The rationale for the chosen targetRole, explaining why this depth of exploration is appropriate.",
        "type": "string"
      },
      "targetRole": {
        "description": "How much exploration is needed before drafting a ファイル by ファイル plan. planner: The task is very small and direct, no more exploration is needed at all and a full ファイル by ファイル plan can be proposed now; architect: approach and more detailed exploration is needed before writing the ファイル by ファイル plan; engineering_team: the task is very large and may require a multi-faceted analysis, involving a complex interaction between various components, before the approach can be written and a ファイル by ファイル plan can be made.",
        "enum": [
          "engineering_team",
          "architect",
          "planner"
        ],
        "type": "string"
      }
    },
    "required": [
      "targetRole",
      "reason"
    ]
  },
  "explanation_response": {
    "description": "- You are diligent and thorough! You NEVER leave any parts ambiguous in the explanation.\n- Provide clear, concise explanations that are easy to understand.\n- Use markdown format for better readability.",
    "parameters": {
      "containsImplementationPlan": {
        "description": "Set to true when the explanation provides specific, actionable guidance that can be directly implemented as ファイル modifications, regardless of whether it's presented as analysis, recommendations, or explicit instructions.",
        "type": "boolean"
      },
      "explanation": {
        "description": "Provide a clear and comprehensive explanation of the topic or concept. Optimize for readability and use markdown formatting.",
        "type": "string"
      },
      "mermaid": {
        "description": "生成します a Mermaid diagram to visualize the concept or flow. The diagram should be simple and easy to understand, focusing on the key aspects.",
        "type": "string"
      }
    },
    "required": [
      "explanation",
      "mermaid",
      "containsImplementationPlan"
    ]
  }
}
